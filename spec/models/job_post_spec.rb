require 'rails_helper'
#rspec was generated by adding the gem 'rspec-rails' and the following command: rails g rspec:install
#this was generated with: rails g rspec:model JobPost
RANDOM_HUNDRED_CHARS = "hello world hello world hello world hello world hello world hello world hello world hello hello worl hello world hello world"
RSpec.describe JobPost, type: :model do
  # pending "add some examples to (or delete) #{__FILE__}"
  # above is boilerplate as example - we don't need it

  describe "validates" do
    describe "title" do
      it "requires a title" do
        #Given
        job_post = JobPost.new

        #when
        job_post.valid?

        #Then
        #expect is passed a value we're asserting that we can chain with .to()
        #.to() accepts an assertion/expectation clause

        expect(job_post.errors.messages).to(have_key(:title))
      end

      it "requires a unique title" do
        persisted_job_post = JobPost.create(title: "full stack dev", description: RANDOM_HUNDRED_CHARS, min_salary: 35_000, location: 'Vancouver')
        job_post = JobPost.new(title: persisted_job_post.title, description: RANDOM_HUNDRED_CHARS, min_salary: 35_000, location: 'Vancouver' )
        job_post.valid?
        expect(job_post.errors.messages).to(have_key(:title))
      end
    end

    describe "decription" do

      it "requires a description" do
        job_post = JobPost.new
        job_post.valid?
        expect(job_post.errors.messages).to(have_key(:description))
      end

      it "requires a description larger than a hundred characters" do
        job_post = JobPost.new(description: "abcd")
        job_post.valid?
        expect(job_post.errors.messages).to(have_key(:description))
      end

    end

    describe "min_salary" do
      it "requires min_salary to be a number and to be greater than 30_000" do
        job_post = JobPost.new(min_salary: 25_000)
        job_post.valid?
        expect(job_post.errors.details[:min_salary][0][:error]).to(be(:greater_than_or_equal_to))
      end
    end

    describe "location" do
      it "requires a location" do
        job_post = JobPost.new
        job_post.valid?
        expect(job_post.errors.messages).to(have_key(:location))
      end
    end
  end
end
