class QuestionSerializer < ActiveModel::Serializer
  #this is generated by adding the gem 'active_model_serializers' 
  #and then command: rails g serializer question

  #Before rails sends JSON it will check to see if the model has a serializer with the same name
  #If rails finds a serializer with the same name, it will automatically serialize the instances into a JSON response

  #The attributes method is provided by the active model serializer.  We define what gets returned as JSON within this method

  #Docs for serializers: https://github.com/rails-api/active_model_serializers/blob/v0.10.6/docs/general/serializers.md
  attributes(
    :id, 
    :title,
    :body,
    :created_at,
    :updated_at,
    :view_count,
    :randomStuff,
    :like_count,
    :tags
  )

  #-----------------------------Associations--------------->

  # To include associate models, we can use the same "belongs_to" and "has_many" methods.
  # We can rename the associate with "key" in the serialized output.
  belongs_to :user, key: :author

  class UserSerializer < ActiveModel::Serializer
    attributes :id, :first_name, :last_name, :full_name
  end

  has_many :answers

  # To customize serialization for associated models, we can define a serializer
  # within the current serializer. This would replace any global serializer 
  # whenever we are serializing questions.
  class AnswerSerializer < ActiveModel::Serializer
    attributes :id, :body, :created_at, :updated_at, :author_full_name

    def author_full_name
      object.user&.full_name
    end
  end

  #-----------------------Custom methods and attributes to render in JSON format--->

  def randomStuff
    "You can add anything to your json response. This is an example"
  end

  def like_count
    #object refers to the instance of the model being serialized.  
    #Kind of like "this" in JS or "self" in Ruby
    object.likes.count
  end
end